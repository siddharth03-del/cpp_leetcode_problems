use fbdb;
desc users;
ALTER TABLE users DROP COLUMN id;
desc users;
create table posts(post_id int PRIMARY KEY);
desc posts;
drop table posts;
show tables;
desc users;
create table post(user_id int, post_id int primary key, time timestamp DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY (user_id) REFERENCES users(user_id));
desc post;
select * from users;
insert into users(user_id, name, email ) values(1, "siddharth", "siddharth@gmail.com"),(2, "nikshay","nikshay@gmail.com"),(3,"ashish","ashish@gmail.com");
select * from post;
insert into post(user_id, post_id) values (1, 23),(2,45),(3, 67);
insert into users(user_id, name, email) values(4, "dilip" , "dilip@gmail.com");
SELECT name, email, users.user_id, post.post_id from users INNER JOIN post ON users.user_id = post.user_id;
SELECT * from users LEFT JOIN post using (user_id);
SELECT * from users RIGHT JOIN post using (user_id);
UPDATE post JOIN users ON post.user_id = users.user_id SET post.post_id = post.post_id + 5;
SELECT * FROM post;
UPDATE users JOIN post ON post.user_id = users.user_id SET users.email = "abc@gmail.com";
SELECT * from users;
UPDATE users JOIN post ON post.user_id = users.user_id SET users.email = CONCAT(users.name, '@gmail.com');
SELECT users.user_id, users.name from users JOIN post ON users.user_id = post.user_id;
CREATE Table comments(comment_id int AUTO_INCREMENT PRIMARY KEY, user_id INT, post_id INT, created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP, FOREIGN KEY(user_id) REFERENCES users(user_id), FOREIGN KEY(post_id) REFERENCES post(post_id));
ALTER Table comments ADD COLUMN content varchar(50);
INSERT INTO comments(user_id, post_id, content) values (1, 28, "nice post"),(1,50,"beautiful");
CREATE Table likes(like_id int PRIMARY KEY AUTO_INCREMENT, type ENUM("post","comment"), user_id int, time TIMESTAMP DEFAULT CURRENT_TIMESTAMP);
desc likes;
ALTER Table likes ADD CONSTRAINT FOREIGN KEY (user_id) REFERENCES users(user_id);
ALTER Table likes ADD COLUMN content_id int;
insert into likes(type, user_id, content_id) VALUES("post",2,72);

select * from post LEFT JOIN likes ON post.post_id = likes.content_id;
SELECT users.name, users.user_id, likes.`type`, likes.content_id from users JOIN likes ON users.user_id = likes.user_id;
select users.name, users.email, users.user_id, comments.comment_id, post.post_id from users LEFT JOIN comments ON users.user_id = comments.user_id LEFT JOIN post ON post.user_id = users.user_id;
insert into post(user_id, post_id) values(1, 45);
select users.name from post LEFT JOIN users ON users.user_id = post.user_id;
select users.name from comments LEFT JOIN users on users.user_id = comments.user_id;
select users.name from post LEFT JOIN users ON users.user_id = post.user_id;
insert into likes(type, user_id, content_id) VALUES("comment", 4, 28);
select users.name, post.post_id from users LEFT JOIN post ON users.user_id = post.user_id;
select users.name, comments.comment_id from users LEFT JOIN comments ON users.user_id = comments.user_id;
CREATE TABLE tem AS
SELECT users.user_id from likes LEFT JOIN users ON users.user_id = likes.user_id; 
SELECT * from tem;
INSERT INTO tem(user_id) VALUES(2);
SELECT tem.user_id, post.post_id from tem RIGHT JOIN post ON post.user_id = tem.user_id;
CREATE TABLE temporary AS
SELECT comments.post_id from post RIGHT JOIN comments ON post.post_id = comments.post_id; 
INSERT INTO temporary(post_id) VALUES(100);
SELECT temporary.post_id, likes.like_id from temporary RIGHT JOIN likes ON temporary.post_id = likes.content_id;
select * from temporary;

create DATABASE test;
use test;
Create table Customer (id int, name varchar(25), referee_id int)
insert into Customer (id, name, referee_id) values ('1', 'Will', NULL);
insert into Customer (id, name, referee_id) values ('2', 'Jane', NULL);
insert into Customer (id, name, referee_id) values ('3', 'Alex', '2');
insert into Customer (id, name, referee_id) values ('4', 'Bill', NULL);
insert into Customer (id, name, referee_id) values ('5', 'Zack', '1');
insert into Customer (id, name, referee_id) values ('6', 'Mark', '2');
select name FROM Customer where NOT referee_id = 2 OR referee_id IS NULL;
DROP TABLE Customer;
Create table If Not Exists Visits(visit_id int, customer_id int);
Create table If Not Exists Transactions(transaction_id int, visit_id int, amount int);
insert into Visits (visit_id, customer_id) values ('1', '23');
insert into Visits (visit_id, customer_id) values ('2', '9')

insert into Visits (visit_id, customer_id) values ('4', '30')

insert into Visits (visit_id, customer_id) values ('5', '54')

insert into Visits (visit_id, customer_id) values ('6', '96')

insert into Visits (visit_id, customer_id) values ('7', '54')

insert into Visits (visit_id, customer_id) values ('8', '54')

insert into Transactions (transaction_id, visit_id, amount) values ('2', '5', '310');
insert into Transactions (transaction_id, visit_id, amount) values ('3', '5', '300');
insert into Transactions (transaction_id, visit_id, amount) values ('9', '5', '200');
insert into Transactions (transaction_id, visit_id, amount) values ('12', '1', '910');
insert into Transactions (transaction_id, visit_id, amount) values ('13', '2', '970');
SELECT visits.customer_id, COUNT(visits.visit_id) AS count_no_trans from visits LEFT JOIN transactions ON visits.visit_id = transactions.visit_id WHERE transaction_id IS NULL GROUP BY visits.customer_id;
Create table If Not Exists Weather (id int, recordDate date, temperature int);
insert into Weather (id, recordDate, temperature) values ('1', '2015-01-01', '10');
insert into Weather (id, recordDate, temperature) values ('2', '2015-01-02', '25');
insert into Weather (id, recordDate, temperature) values ('3', '2015-01-03', '20');
insert into Weather (id, recordDate, temperature) values ('4', '2015-01-04', '30');
select w2.id FROM Weather as w1 INNER JOIN Weather as w2 ON w1.`recordDate`= SUBDATE(w2.`recordDate`, INTERVAL 1 DAY) WHERE w1.temperature < w2.temperature;
Create table If Not Exists Activity (machine_id int, process_id int, activity_type ENUM('start', 'end'), timestamp float);
insert into Activity (machine_id, process_id, activity_type, timestamp) values ('0', '0', 'start', '0.712');
insert into Activity (machine_id, process_id, activity_type, timestamp) values ('0', '0', 'end', '1.52');
insert into Activity (machine_id, process_id, activity_type, timestamp) values ('0', '1', 'start', '3.14');
insert into Activity (machine_id, process_id, activity_type, timestamp) values ('0', '1', 'end', '4.12');
insert into Activity (machine_id, process_id, activity_type, timestamp) values ('1', '0', 'start', '0.55');
insert into Activity (machine_id, process_id, activity_type, timestamp) values ('1', '0', 'end', '1.55');
insert into Activity (machine_id, process_id, activity_type, timestamp) values ('1', '1', 'start', '0.43');
insert into Activity (machine_id, process_id, activity_type, timestamp) values ('1', '1', 'end', '1.42');
insert into Activity (machine_id, process_id, activity_type, timestamp) values ('2', '0', 'start', '4.1');
insert into Activity (machine_id, process_id, activity_type, timestamp) values ('2', '0', 'end', '4.512');
insert into Activity (machine_id, process_id, activity_type, timestamp) values ('2', '1', 'start', '2.5');
insert into Activity (machine_id, process_id, activity_type, timestamp) values ('2', '1', 'end', '5');
SELECT a2.machine_id , ROUND(AVG(a2.timestamp - a1.timestamp), 3) as processing_time from Activity as a1 INNER JOIN Activity as a2 ON a1.machine_id = a2.machine_id AND a1.process_id = a2.process_id WHERE a1.activity_type = 'start' AND a2.activity_type = 'end' GROUP BY a1.machine_id;
SELECT COUNT(DISTINCT Activity.process_id) from activity; 
Create table If Not Exists Employee (empId int, name varchar(255), supervisor int, salary int);
Create table If Not Exists Bonus (empId int, bonus int);
insert into Employee (empId, name, supervisor, salary) values ('3', 'Brad', NULL, '4000');
insert into Employee (empId, name, supervisor, salary) values ('1', 'John', '3', '1000');
insert into Employee (empId, name, supervisor, salary) values ('2', 'Dan', '3', '2000');
insert into Employee (empId, name, supervisor, salary) values ('4', 'Thomas', '3', '4000');
insert into Bonus (empId, bonus) values ('2', '500');
insert into Bonus (empId, bonus) values ('4', '2000');
SELECT Employee.name, Bonus.bonus from Employee left join Bonus on Employee.empId = Bonus.empId WHERE bonus IS NULL OR bonus <= 500;
Create table If Not Exists Students (student_id int, student_name varchar(20));
Create table If Not Exists Subjects (subject_name varchar(20));
Create table If Not Exists Examinations (student_id int, subject_name varchar(20));
insert into Students (student_id, student_name) values ('1', 'Alice');
insert into Students (student_id, student_name) values ('2', 'Bob');
insert into Students (student_id, student_name) values ('13', 'John');
insert into Students (student_id, student_name) values ('6', 'Alex');
insert into Subjects (subject_name) values ('Math');
insert into Subjects (subject_name) values ('Physics');
insert into Subjects (subject_name) values ('Programming');
insert into Examinations (student_id, subject_name) values ('1', 'Math');
insert into Examinations (student_id, subject_name) values ('1', 'Physics');
insert into Examinations (student_id, subject_name) values ('1', 'Programming');
insert into Examinations (student_id, subject_name) values ('2', 'Programming');
insert into Examinations (student_id, subject_name) values ('1', 'Physics');
insert into Examinations (student_id, subject_name) values ('1', 'Math');
insert into Examinations (student_id, subject_name) values ('13', 'Math');
insert into Examinations (student_id, subject_name) values ('13', 'Programming');
insert into Examinations (student_id, subject_name) values ('13', 'Physics');
insert into Examinations (student_id, subject_name) values ('2', 'Math');
insert into Examinations (student_id, subject_name) values ('1', 'Math');
INSERT into students(student_id, student_name) VALUES(13, 'john');
select students.student_id, students.student_name, subjects.subject_name from students JOIN subjects ORDER BY student_id;
SELECT DISTINCT examinations.student_id, examinations.subject_name from examinations ORDER BY examinations.student_id;
select student_id, subject_name, COUNT(*) as attended_exams from examinations GROUP BY student_id, subject_name;
select students.student_id, students.student_name, subjects.subject_name from students JOIN subjects ORDER BY student_id LEFT JOIN examinations GROUP BY student_id, subject_name ON students.student_id = examinations.student_id AND subjects.subject_name = examinations.subject_name;
select students.student_id, students.student_name, subjects.subject_name from students JOIN subjects ORDER BY student_id LEFT JOIN examinations ON students.student_id = examinations.student_id AND subjects.subject_name = examinations.subject_name; 
Create table If Not Exists Prices (product_id int, start_date date, end_date date, price int);
Create table If Not Exists UnitsSold (product_id int, purchase_date date, units int);
insert into Prices (product_id, start_date, end_date, price) values ('1', '2019-02-17', '2019-02-28', '5');
insert into Prices (product_id, start_date, end_date, price) values ('1', '2019-03-01', '2019-03-22', '20');
insert into Prices (product_id, start_date, end_date, price) values ('2', '2019-02-01', '2019-02-20', '15');
insert into Prices (product_id, start_date, end_date, price) values ('2', '2019-02-21', '2019-03-31', '30');
insert into prices(product_id, start_date, end_date, price) VALUES('3', '2019-02-21', '2019-03-31', '30');
insert into UnitsSold (product_id, purchase_date, units) values ('1', '2019-02-25', '100');
insert into UnitsSold (product_id, purchase_date, units) values ('1', '2019-03-01', '15');
insert into UnitsSold (product_id, purchase_date, units) values ('2', '2019-02-10', '200');
insert into UnitsSold (product_id, purchase_date, units) values ('2', '2019-03-22', '30');

select unitssold.product_id, ROUND(SUM(prices.price * UnitsSold.units) / SUM(unitssold.units), 2) as average_price from prices LEFT JOIN unitssold ON unitssold.product_id = prices.product_id WHERE unitssold.purchase_date BETWEEN prices.start_date AND prices.end_date GROUP BY unitssold.product_id;
SELECT unitssold.product_id, prices.price, unitssold.units from prices LEFT JOIN unitssold ON unitssold.product_id = prices.product_id WHERE unitssold.purchase_date BETWEEN prices.start_date AND prices.end_date;
Create table If Not Exists Project (project_id int, employee_id int);
Create table If Not Exists Employee (employee_id int, name varchar(10), experience_years int);
insert into Project (project_id, employee_id) values ('1', '1');
insert into Project (project_id, employee_id) values ('1', '2');
insert into Project (project_id, employee_id) values ('1', '3');
insert into Project (project_id, employee_id) values ('2', '1');
insert into Project (project_id, employee_id) values ('2', '4');
insert into Employee (employee_id, name, experience_years) values ('1', 'Khaled', '3');
insert into Employee (employee_id, name, experience_years) values ('2', 'Ali', '2');
insert into Employee (employee_id, name, experience_years) values ('3', 'John', '1');
insert into Employee (employee_id, name, experience_years) values ('4', 'Doe', '2');
SELECT project.project_id, ROUND(AVG(Employee.experience_years), 2) as average_years from project LEFT JOIN employee ON project.employee_id = employee.employee_id GROUP BY project.project_id; 
Create table If Not Exists Users (user_id int, user_name varchar(20));
Create table If Not Exists Register (contest_id int, user_id int);
insert into Users (user_id, user_name) values ('6', 'Alice');
insert into Users (user_id, user_name) values ('2', 'Bob');
insert into Users (user_id, user_name) values ('7', 'Alex');
insert into Register (contest_id, user_id) values ('215', '6');
insert into Register (contest_id, user_id) values ('209', '2');
insert into Register (contest_id, user_id) values ('208', '2');
insert into Register (contest_id, user_id) values ('210', '6');
insert into Register (contest_id, user_id) values ('208', '6');
insert into Register (contest_id, user_id) values ('209', '7');
insert into Register (contest_id, user_id) values ('209', '6');
insert into Register (contest_id, user_id) values ('215', '7');
insert into Register (contest_id, user_id) values ('208', '7');
insert into Register (contest_id, user_id) values ('210', '2');
insert into Register (contest_id, user_id) values ('207', '2');
insert into Register (contest_id, user_id) values ('210', '7');
select register.contest_id, count(register.contest_id) as percentage from register GROUP BY register.contest_id ORDER BY percentage DESC;
select register.contest_id ,COUNT(register.contest_id) as percentage from users LEFT JOIN register on users.user_id = register.user_id GROUP BY register.contest_id ORDER BY percentage DESC;
SELECT count(users.user_id) from users;
select register.contest_id, ROUND(COUNT(register.contest_id) * 100/(SELECT COUNT(*) from users), 2) as percentage from register GROUP BY register.contest_id ORDER BY percentage DESC, contest_id ASC;
Create table If Not Exists Teacher (teacher_id int, subject_id int, dept_id int);
insert into Teacher (teacher_id, subject_id, dept_id) values ('1', '2', '3');
insert into Teacher (teacher_id, subject_id, dept_id) values ('1', '2', '4');
insert into Teacher (teacher_id, subject_id, dept_id) values ('1', '3', '3');
insert into Teacher (teacher_id, subject_id, dept_id) values ('2', '1', '1');
insert into Teacher (teacher_id, subject_id, dept_id) values ('2', '2', '1');
insert into Teacher (teacher_id, subject_id, dept_id) values ('2', '3', '1');
insert into Teacher (teacher_id, subject_id, dept_id) values ('2', '4', '1');
SELECT * from teacher;
select teacher.teacher_id , COUNT(distinct teacher.subject_id) from teacher GROUP BY teacher.teacher_id;
Create table If Not Exists Activity (user_id int, session_id int, activity_date date, activity_type ENUM('open_session', 'end_session', 'scroll_down', 'send_message'));
insert into Activity (user_id, session_id, activity_date, activity_type) values ('1', '1', '2019-07-20', 'open_session');
insert into Activity (user_id, session_id, activity_date, activity_type) values ('1', '1', '2019-07-20', 'scroll_down');
insert into Activity (user_id, session_id, activity_date, activity_type) values ('1', '1', '2019-07-20', 'end_session');
insert into Activity (user_id, session_id, activity_date, activity_type) values ('2', '4', '2019-07-20', 'open_session');
insert into Activity (user_id, session_id, activity_date, activity_type) values ('2', '4', '2019-07-21', 'send_message');
insert into Activity (user_id, session_id, activity_date, activity_type) values ('2', '4', '2019-07-21', 'end_session');
insert into Activity (user_id, session_id, activity_date, activity_type) values ('3', '2', '2019-07-21', 'open_session');
insert into Activity (user_id, session_id, activity_date, activity_type) values ('3', '2', '2019-07-21', 'send_message');
insert into Activity (user_id, session_id, activity_date, activity_type) values ('3', '2', '2019-07-21', 'end_session');
insert into Activity (user_id, session_id, activity_date, activity_type) values ('4', '3', '2019-06-25', 'open_session');
insert into Activity (user_id, session_id, activity_date, activity_type) values ('4', '3', '2019-06-25', 'end_session');
Create table If Not Exists Employee (id int, name varchar(255), department varchar(255), managerId int);
insert into Employee (id, name, department, managerId) values ('101', 'John', 'A', NULL);
insert into Employee (id, name, department, managerId) values ('102', 'Dan', 'A', '101');
insert into Employee (id, name, department, managerId) values ('103', 'James', 'A', '101');
insert into Employee (id, name, department, managerId) values ('104', 'Amy', 'A', '101');
insert into Employee (id, name, department, managerId) values ('105', 'Anne', 'A', '101');
insert into Employee (id, name, department, managerId) values ('106', 'Ron', 'B', '101');
insert into Employee (id, name, department, managerId) values ('107', 'Sid', 'C', '105');
SELECT employee.`managerId` , COUNT(employee.`managerId`) as cnt from employee GROUP BY employee.`managerId` HAVING cnt >= 5 ; 
SELECT e1.name from employee as e1 RIGHT JOIN (SELECT employee.`managerId` , COUNT(employee.`managerId`) as cnt FROM employee GROUP BY employee.`managerId` HAVING cnt >= 5) as e2 ON e2.`managerId` = e1.id;